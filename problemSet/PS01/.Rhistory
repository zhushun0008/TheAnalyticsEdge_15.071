labourPercentage4LongSelected <- subset(labourPercentage4Long,  country  %in% selectedCountry)
ggplot(aes(x = year, y = labour_percentage), data = labourPercentage4LongSelected) +
geom_jitter(aes(color = country)) +
scale_color_brewer(type = 'seq',palette = 3) +
theme_solarized()
ggplot(aes(x = year, y = labour_percentage), data = labourPercentage4LongSelected) +
geom_jitter(aes(color = country)) +
scale_color_brewer(type = 'qual',palette = 3) +
theme_solarized()
selectedYear <- intersect(unemployPercentage4Long$year,labourPercentage4Long$year)
LPlongForIntersectYear <- subset(labourPercentage4Long,  year  %in% selectedYear)
LPlongForIntersectYearAndSelectedCountry  <- subset(LPlongForIntersectYear,  country  %in% selectedCountry)
ggplot(aes(x = year, y = labour_percentage), data = LPlongForIntersectYearAndSelectedCountry) +
geom_jitter(aes(color = country)) +
scale_color_brewer(type = 'qual',palette = 3) +
theme_solarized()
View(unemployPercentage4Long)
UEPlongForIntersectYear
UEPlongForIntersectYear <- subset(unemployPercentage4Long,  year  %in% selectedYear)
UEPlongForIntersectYearAndSelectedCountry  <- subset(UEPlongForIntersectYear,  country  %in% selectedCountry)
View(UEPlongForIntersectYearAndSelectedCountry)
mergedDataset <- data.frame(LPlongForIntersectYearAndSelectedCountry,UEPlongForIntersectYearAndSelectedCountry$unemploy_percentage)
View(mergedDataset)
ncol(mergedDataset)
colnames(mergedDataset)[4] <- "unemploy_percentage"
View(mergedDataset)
ggplot(aes(x = year, y = labour_percentage), data = mergedDataset) +
geom_point(aes(color = country))
ggplot(aes(x = year, y = labour_percentage), data = mergedDataset) +
geom_point(aes(color = country)) +
scale_color_brewer(type = 'qual',palette = 3) +
theme_solarized()
ggplot(aes(x = year, y = labour_percentage), data = mergedDataset) +
geom_point(aes(color = country)) +
scale_color_brewer(type = 'seq',palette = 3) +
theme_solarized()
ggplot(aes(x = year, y = labour_percentage), data = mergedDataset) +
geom_point(aes(color = country)) +
scale_color_brewer(type = 'seq',palette = 5) +
theme_solarized()
ggplot(aes(x = year, y = labour_percentage), data = mergedDataset) +
geom_point(aes(color = country)) +
scale_color_brewer(type = 'qual') +
theme_solarized()
ggplot(aes(x = year, y = labour_percentage), data = mergedDataset) +
geom_point(aes(color = country)) +
theme_solarized()
ggplot(aes(x = year, y = unemploy_percentage), data = mergedDataset) +
geom_point(aes(color = country)) +
theme_solarized()
p11_1 <- ggplot(aes(x = year, y = labour_percentage), data = mergedDataset) +
geom_point(aes(color = country)) +
theme_solarized()
p11_2 <- ggplot(aes(x = year, y = unemploy_percentage), data = mergedDataset) +
geom_point(aes(color = country)) +
theme_solarized()
grid.arrange(p11_1, p11_2)
ggplot(aes(x = tenure, y = prop_initiated), data = pf) +
geom_line(aes(color = year_joined.bucket), stat = "summary", fun.y = "mean") +
geom_smooth(color = "orange") +
theme_solarized()
ggplot(aes(x = year, y = labour_percentage), data = mergedDataset) +
geom_point(aes(color = country)) +
geom_smooth()+
theme_solarized()
1
ggplot(aes(x = year, y = labour_percentage), data = mergedDataset) +
geom_point(aes(color = country)) +
geom_smooth()+
theme_solarized()
ggplot(aes(x = year, y = labour_percentage), data = mergedDataset) +
geom_point(aes(color = country))
ggplot(aes(x = year, y = labour_percentage), data = mergedDataset) +
geom_line(aes(color = country))
ggplot(aes(x = year, y = labour_percentage), data = mergedDataset) +
geom_point(aes(color = country)) +
geom_line()+
theme_solarized()
ggplot(aes(x = year, y = labour_percentage), data = mergedDataset) +
geom_point(aes(color = country)) +
geom_line(stat = "summary",fun.y = mean)+
theme_solarized()
ggplot(aes(x = year, y = labour_percentage), data = mergedDataset) +
geom_point(aes(color = country)) +
geom_point(stat = "summary",fun.y = mean) +
theme_solarized()
ggplot(aes(x = year, y = labour_percentage), data = mergedDataset) +
geom_point(aes(color = country)) +
geom_smooth(stat = "summary",fun.y = mean) +
theme_solarized()
p11_1 <- ggplot(aes(x = year, y = labour_percentage), data = mergedDataset) +
geom_point(aes(color = country)) +
geom_point(stat = "summary",fun.y = mean) +
theme_solarized()
p11_2 <- ggplot(aes(x = year, y = unemploy_percentage), data = mergedDataset) +
geom_point(aes(color = country)) +
geom_point(stat = "summary",fun.y = mean) +
theme_solarized()
grid.arrange(p11_1, p11_2)
unemployPercentage4 <- unemployPercentage3[-30,]
unemployPercentage4Long <- melt(unemployPercentage4,id.vars = 'country')
colnames(unemployPercentage4Long)[2] <- "year"
colnames(unemployPercentage4Long)[3] <- "unemploy_percentage"
# Remove X from column names again
unemployPercentage4Long$year <- substr(unemployPercentage4Long$year, start = 2, stop = 5)
labourPercentage3$country <- rownames(labourPercentage3)
labourPercentage4 <- labourPercentage3[-190,]
labourPercentage4Long <- melt(labourPercentage4,id.vars = 'country')
# Remove X from column names again
labourPercentage4Long$variable <- substr(labourPercentage4Long$variable, start = 2, stop = 5)
colnames(labourPercentage4Long)[2] <- 'year'
colnames(labourPercentage4Long)[3] <- 'labour_percentage'
View(labourPercentage4Long)
labourPercentage3$country <- rownames(labourPercentage3)
labourPercentage4 <- labourPercentage3[-190,]
labourPercentage4Long <- melt(labourPercentage4,id.vars = 'country')
View(labourPercentage4Long)
labourPercentage4Long$variable <- substr(labourPercentage4Long$variable, start = 2, stop = 5)
colnames(labourPercentage4Long)[2] <- 'year'
colnames(labourPercentage4Long)[3] <- 'labour_percentage'
table(labourPercentage4Long$year)
?cut
labourPercentage4Long$yearGroup <- cut(labourPercentage4Long$year,seq(1980,2007,4))
class(labourPercentage4Long$year)
labourPercentage4Long$yearGroup <- cut(as.numeric(labourPercentage4Long$year),seq(1980,2007,4))
head(labourPercentage4Long$yearGroup)
View(labourPercentage4Long)
labourPercentage4Long$yearGroup <- cut(labourPercentage4Long$year,c(1979,1986,1993,2000,2007))
labourPercentage4Long$year <- as.integer(labourPercentage4Long$year)
labourPercentage4Long$yearGroup <- cut(labourPercentage4Long$year,c(1979,1986,1993,2000,2007))
head(labourPercentage4Long$yearGroup)
ggplot(aes(x = year, y = labour_percentage),
data = subset(pf, !is.na(yearGroup))) +
geom_line(aes(color = yearGroup), stat = "summary", fun.y = median) +
theme_solarized()
ggplot(aes(x = year, y = labour_percentage),
data = subset(labourPercentage4Long, !is.na(yearGroup))) +
geom_line(aes(color = yearGroup), stat = "summary", fun.y = mean) +
theme_solarized()
ggplot(aes(x = year, y = labour_percentage),
data = subset(labourPercentage4Long, !is.na(yearGroup))) +
geom_line(aes(color = yearGroup), stat = "summary", fun.y = mean) +
geom_smooth()+
theme_solarized()
ggplot(aes(x = year, y = labour_percentage),
data = subset(labourPercentage4Long, !is.na(yearGroup))) +
geom_point(aes(color = yearGroup)) +
geom_smooth() +
theme_solarized()
ggplot(aes(x = year, y = labour_percentage),
data = subset(labourPercentage4Long, !is.na(yearGroup))) +
geom_jitter(aes(color = yearGroup)) +
geom_smooth() +
theme_solarized()
ggplot(aes(x = year, y = labour_percentage),
data = subset(labourPercentage4Long, !is.na(yearGroup))) +
geom_line(aes(color = yearGroup),stat = "summary",fun.y = mean) +
geom_smooth() +
theme_solarized()
ggplot(aes(x = year, y = labour_percentage),
data = subset(labourPercentage4Long, !is.na(yearGroup))) +
geom_line(aes(color = yearGroup),stat = "summary",fun.y = mean) +
geom_line(aes(color = yearGroup),stat = "summary",fun.y = median) +
geom_smooth() +
theme_solarized()
ggplot(aes(x = year, y = labour_percentage),
data = labourPercentage4Long +
geom_line(stat = "summary",fun.y = mean) +
geom_smooth() +
theme_solarized()
ggplot(aes(x = year, y = labour_percentage),
data = labourPercentage4Long) +
geom_line(stat = "summary",fun.y = mean) +
geom_smooth() +
theme_solarized()
ggplot(aes(x = year, y = labour_percentage),
data = labourPercentage4Long) +
geom_line(stat = "summary",fun.y = mean) +
geom_smooth() +
theme_solarized()
ggplot(aes(x = year, y = labour_percentage),
data = labourPercentage4Long) +
geom_point(aex(country == "Japan"))+
geom_line(stat = "summary",fun.y = mean) +
geom_smooth() +
theme_solarized()
ggplot(aes(x = year, y = labour_percentage),
data = labourPercentage4Long) +
geom_point(aex(group = (country == "Japan")))+
geom_line(stat = "summary",fun.y = mean) +
geom_smooth() +
theme_solarized()
ggplot(aes(x = year, y = labour_percentage),
data = labourPercentage4Long) +
geom_point(aes(group = (country == "Japan")))+
geom_line(stat = "summary",fun.y = mean) +
geom_smooth() +
theme_solarized()
ggplot(aes(x = year, y = labour_percentage),
data = labourPercentage4Long) +
geom_line(stat = "summary",fun.y = mean) +
geom_smooth() +
theme_solarized()
ggplot(aes(x = year, y = labour_percentage),
data = labourPercentage4Long) +
geom_point(stat = "summary",fun.y = mean) +
geom_smooth() +
theme_solarized()
ggplot(aes(x = year, y = unemploy_percentage),
data = unemployPercentage4Long) +
geom_point(stat = "summary",fun.y = mean) +
geom_smooth() +
theme_solarized()
# Remove last row which contains na
unemployPercentage1 <- data.frame(t(unemployPercentage))
# Remove last row of NA.
unemployPercentage2 <- unemployPercentage1[-26,]
unemployPercentage3 <- data.frame(t(unemployPercentage2))
unemployPercentage3$country <- rownames(unemployPercentage3)
# Remove last row of NA.
unemployPercentage4 <- unemployPercentage3[-30,]
unemployPercentage4Long <- melt(unemployPercentage4,id.vars = 'country')
colnames(unemployPercentage4Long)[2] <- "year"
colnames(unemployPercentage4Long)[3] <- "unemploy_percentage"
# Remove X from column names again
unemployPercentage4Long$year <- substr(unemployPercentage4Long$year, start = 2, stop = 5)
View(unemployPercentage4Long)
ggplot(aes(x = year, y = unemploy_percentage),
data = unemployPercentage4Long) +
geom_point(stat = "summary",fun.y = mean) +
geom_smooth() +
theme_solarized()
ggplot(aes(x = year, y = labour_percentage),
data = labourPercentage4Long) +
geom_point(stat = "summary",fun.y = mean) +
geom_smooth() +
theme_solarized()
ggplot(aes(x = year, y = unemploy_percentage),
data = unemployPercentage4Long) +
geom_point(stat = "summary",fun.y = mean) +
geom_smooth() +
theme_solarized()
View(labourPercentage4Long)
View(unemployPercentage4Long)
library(ggplot2)
library(ggthemes)
data(diamonds)
summary(diamonds)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point() +
theme_solarized()
?quantile
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point() +
xlim(0,quantile(diamonds$carat,0.99)) +
ylim(0,quantile(diamonds$price,0.99)) +
theme_solarized()
ggplot(aes(x = carat, y = price), data = diamonds) +
scale_x_continuous(limits = c(0,quantile(diamonds$carat,0.99))) +
scale_y_continuous(limmits = c(0,quantile(diamonds$price,0.99)))+
geom_point(fill = I("#F7420"), color = I("black"), shape = 21) +
theme_solarized()
ggplot(aes(x = carat, y = price), data = diamonds) +
scale_x_continuous(limits = c(0,quantile(diamonds$carat,0.99))) +
scale_y_continuous(limits = c(0,quantile(diamonds$price,0.99)))+
geom_point(fill = I("#F7420"), color = I("black"), shape = 21) +
theme_solarized()
install.packages("ISLR")
library(ISLR)
?Auto
names(Auto)
pwd()
pwd()
?pwd
??pwd
?pbeta
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("Imbalance = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(UsingR); data(galton)
par(mfrow=c(1,2))
hist(galton$child,col="blue",breaks=100)
hist(galton$parent,col="blue",breaks=100)
library(UsingR)
data(galton)
par(mfrow=c(1,2))
hist(galton$child,col="blue",breaks=100)
hist(galton$parent,col="blue",breaks=100)
data(galton)
library(UsingR)
install.packages("UsingR")
library(UsingR)
data(galton)
par(mfrow=c(1,2))
hist(galton$child,col="blue",breaks=100)
hist(galton$parent,col="blue",breaks=100)
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("Imbalance = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
mvt <- read.csv("F:/SkyDrive/Studying/MIT_COURSES/Th AnalyticsEdge_15.071x/problemSet/datasetForPS/mvtWeek1.csv")
str(mvt)
max(mvt$ID)
min(mvt$Beat)
table(mvt$Arrest)
matchedAlley <- match("ALLEY",mvt$LocationDescription)
length(matchedAlley)
summary(mvt)
str(mvt)
summary(mvt)
mvt$Date[1]
DateConvert = as.Date(strptime(mvt$Date, "%m/%d/%y %H:%M"))
summary(DateConvert)
?month
?months
?strptime
which.min(table(mvt$Month))
which.max(table(mvt$Weekday))
DateConvert = as.Date(strptime(mvt$Date, "%m/%d/%y %H:%M"))
summary(DateConvert)
summary(DateConvert)
mvt$Month = months(DateConvert)
mvt$Weekday = weekdays(DateConvert)
mvt$Date = DateConvert
which.min(table(mvt$Month))
which.max(table(mvt$Weekday))
table(mvt$Month)
table(mvt$Month)
mvt <- read.csv("F:/SkyDrive/Studying/MIT_COURSES/Th AnalyticsEdge_15.071x/problemSet/datasetForPS/mvtWeek1.csv")
DateConvert = as.Date(strptime(mvt$Date, "%m/%d/%y %H:%M"))
summary(DateConvert)
mvt$Month = months(DateConvert)
mvt$Weekday = weekdays(DateConvert)
mvt$Date = DateConvert
hist(mvt$Date, breaks=101)
table(mvt$Arrest,mvt$Month)
table(mvt$Arrest)
table(mvt$Arrest,mvt$Month)
hist(mvt$Date, breaks=101)
boxplot(mvt$Date ~ mvt$Arrest)
table(mvt$Arrest, mvt$Year)
2152/(2152+18517)
1212/(1212+13068)
550/(550+13542)
sort(table(mvt$LocationDescription),decreasing=T)
TopLocations = c("STREET", "PARKING LOT/GARAGE(NON.RESID.)", "ALLEY", "GAS STATION", "DRIVEWAY - RESIDENTIAL")
Top5 = subset(mvt, LocationDescription %in% TopLocations)
str(Top5)
table(Top5$LocationDescription)
Top5 = subset(mvt, LocationDescription %in% TopLocations)
str(Top5)
table(Top5$LocationDescription)
Top5$LocationDescription = factor(Top5$LocationDescription)
table(Top5$LocationDescription)
?factor
table(Top5$LocationDescription, Top5$Arrest)
249 / (249 + 2059)
132 / (132 + 1543)
439 / (439 + 1672)
1603 / (1603 + 13249)
11595 / (11595 + 144969)
table(Top5$LocationDescription, Top5$Weekday)
library(ggplot2)
library(ggthemes)
summary(cars)
prosperLoanData <- read.csv("F:/SkyDrive/Studying/Udacity/dataScience/ExploratoryDataAnalysis/finalProject/dataSet/prosperLoanData.csv", header = T)
loadStatus
loadStatus <- union(prosperLoanData$LoanStatus,prosperLoanData$LoanStatus)
loadStatus
table(prosperLoanData$LoanStatus)
table(prosperLoanData$AmountDelinquent)
table(prosperLoanData$DelinquenciesLast7Years)
str(prosperLoanData$DelinquenciesLast7Years)
summary(prosperLoanData$DelinquenciesLast7Years)
View(prosperLoanData)
cor(prosperLoanData, use="complete.obs", method="kendall")
?cor
cor(prosperLoanData, method="kendall")
View(prosperLoanData)
tapply(prosperLoanData$AmountDelinquent,prosperLoanData$BorrowerState,mean)
summary(prosperLoanData$BorrowerState)
ggplot(aes(x = AmountDelinquent), data = prosperLoanData) +
geom_histogram(aes(fill = BorrowerState)) +
ggtitle("Number of people for different Occupation") +
theme_solarized()
ggplot(aes(x = ProsperScore), data = prosperLoanData) +
geom_histogram(aes(fill = Occupation)) +
ggtitle("Number of people for different Occupation") +
theme_solarized()
ggplot(aes(x = ProsperScore), data = prosperLoanData) +
geom_histogram(aes(fill = Occupation)) +
ggtitle("Prosper Score for different Occupation") +
theme_solarized()
ggplot(aes(x = ProsperScore), data = prosperLoanData) +
geom_histogram() +
facet_wrap(~Occupation) +
ggtitle("Prosper Score for different Occupation") +
theme_solarized()
ggplot(aes(x = ProsperScore), data = prosperLoanData) +
geom_histogram() +
ggtitle("Prosper Score for different Occupation") +
theme_solarized()
mean(prosperLoanData$ProsperScore)
mean(prosperLoanData$ProsperScore,na.rm=T)
?geom_vline
ggplot(aes(x = ProsperScore), data = prosperLoanData) +
geom_histogram(color = "orange") +
geom_vline(xintercept = mean(prosperLoanData$ProsperScore,na.rm = T)) +
ggtitle("Prosper Score for different Occupation") +
theme_solarized()
ggplot(aes(x = ProsperScore), data = prosperLoanData) +
geom_histogram(fill = "orange") +
geom_vline(xintercept = mean(prosperLoanData$ProsperScore,na.rm = T)) +
geom_vline(xintercept = median(prosperLoanData$ProsperScore,na.rm = T)) +
ggtitle("Prosper Score for different Occupation") +
theme_solarized()
ggplot(aes(x = ProsperScore), data = prosperLoanData) +
geom_histogram(fill = "orange") +
geom_vline(xintercept = mean(prosperLoanData$ProsperScore,na.rm = T),linetype = 2) +
geom_vline(xintercept = median(prosperLoanData$ProsperScore,na.rm = T)) +
ggtitle("Prosper Score for different Occupation") +
theme_solarized()
ggplot(aes(x = ProsperScore), data = prosperLoanData) +
geom_histogram(fill = "orange") +
geom_vline(xintercept = mean(prosperLoanData$ProsperScore,na.rm = T),linetype = 2, colour = "red") +
geom_vline(xintercept = median(prosperLoanData$ProsperScore,na.rm = T)) +
ggtitle("Prosper Score for different Occupation") +
theme_solarized()
ggplot(aes(x = ProsperScore), data = prosperLoanData) +
geom_histogram() +
facet_wrap(~Occupation) +
ggtitle("Prosper Score for different Occupation") +
theme_solarized()
str(prosperLoanData$prosperLoanData)
summary(prosperLoanData$prosperLoanData)
str(prosperLoanData$ProsperScore)
summary(prosperLoanData$ProsperScore)
ggplot(aes(x = ProsperScore), data = prosperLoanData) +
geom_histogram(color = "orange") +
facet_wrap(~ Occupation) +
ggtitle("Prosper Score for different Occupation") +
theme_solarized()
ggplot(aes(x = ProsperScore), data = prosperLoanData) +
geom_histogram(fill = "orange") +
facet_wrap(~ Occupation) +
ggtitle("Prosper Score for different Occupation") +
theme_solarized()
table(limited$Smartphone,limited$Tried.Masking.Identity)
setwd("F:/SkyDrive/Studying/MIT_COURSES/TheAnalyticsEdge_15.071x/problemSet/PS01")
library(ggthemes)
library(ggplot2)
mvt <- read.csv("F:/SkyDrive/Studying/MIT_COURSES/Th AnalyticsEdge_15.071x/problemSet/datasetForPS/mvtWeek1.csv")
CPS <- read.csv("F:/SkyDrive/Studying/MIT_COURSES/TheAnalyticsEdge_15.071x/problemSet/datasetForPS/CPSData.csv")
sort(tapply(is.na(CPS$MetroAreaCode),CPS$State, mean))
View(CPS)
MetroAreaCodes <- read.csv("F:/SkyDrive/Studying/MIT_COURSES/TheAnalyticsEdge_15.071x/problemSet/datasetForPS/MetroAreaCodes.csv")
View(MetroAreaCodes)
CountryCodes <- read.csv("F:/SkyDrive/Studying/MIT_COURSES/TheAnalyticsEdge_15.071x/problemSet/datasetForPS/CountryCodes.csv")
View(CountryCodes)
View(CountryCodes)
MetroAreaCodes <- read.csv("F:/SkyDrive/Studying/MIT_COURSES/TheAnalyticsEdge_15.071x/problemSet/datasetForPS/MetroAreaCodes.csv")
CountryCodes <- read.csv("F:/SkyDrive/Studying/MIT_COURSES/TheAnalyticsEdge_15.071x/problemSet/datasetForPS/CountryCodes.csv")
nrow(MetroAreaCodes)
nrow(CountryCodes)
View(CPS)
View(MetroAreaCodes)
CPS <- merge(CPS,MetroAreaCodes, by.x = "MetroAreaCode",by.y = "Code", all.x = TRUE)
View(CPS)
summary(CPS)
View(MetroAreaCodes)
View(CountryCodes)
View(MetroAreaCodes)
str(CPS)
summary(CPS$MetroArea)
sort(summary(CPS$MetroArea))
summary(CPS$Hispanic)
sort(tapply(CPS$Hispanic, CPS$MetroArea, mean))
sort(tapply(CPS$Race == "Asian", CPS$MetroArea, mean))
sort(tapply(CPS$Education, CPS$MetroArea, na.rm = TRUE,mean))
sort(tapply(CPS$Education, CPS$MetroArea,mean,  na.rm = TRUE))
sort(tapply(CPS$Education == "No high school diploma", CPS$MetroArea,mean,  na.rm = TRUE))
View(CPS)
names(CPS)
View(CountryCodes)
CPS <- merge(CPS, CountryCodes,by.x = "CountryOfBirthCode", by.y = "Code", all.x = TRUE)
summary(CPS)
table(CPS$Country)
sort(table(CPS$Country))
table(CPS$Country != "United States",CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA", mean)
tapply(CPS$Country != "United States",CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA", mean)
tapply(CPS$Country != "United States",CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA", mean,na.rm = T)
tapply(CPS$MetroArea, CPS$Country == "India",na.rm = T)
tapply(CPS$MetroArea, CPS$Country == "India")
table(CPS$MetroArea, CPS$Country == "India")
sort(table(CPS$MetroArea, CPS$Country == "India"))
(table(CPS$MetroArea, CPS$Country == "India")
table(CPS$MetroArea, CPS$Country == "India")
table(CPS$MetroArea, CPS$Country == "India")
sort(tapply(CPS$Country == "India", CPS$MetroArea, sum, na.rm=TRUE))
sort(tapply(CPS$Country == "Brazil", CPS$MetroArea, sum, na.rm=TRUE))
sort(tapply(CPS$Country == "Somalia", CPS$MetroArea, sum, na.rm=TRUE))
